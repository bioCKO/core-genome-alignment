#!/usr/bin/ipython
; -*- mode: python -*- 

import sys
import os
import getopt
from Bio import AlignIO
from Bio import SeqIO

# This script makes a core genome alignment from proteins in a groups file in
# the format output by OrthoMCL. FilterOrthoMCLGroups.py should be used first
# fasta files with DNA sequences for proteins need to be in a directory that
# is provided for the script.

def usage():
    print "MakeCoreGenomeAlignment.py\n \
        <input groups file>\n \
        <directory with fasta files of DNA sequences for proteins>"

def read_groups_file(inFileName):
    """ Read in groups file and create dictionary of group name and proteins in
    group"""
    inFile = open(inFileName, 'r')
    groupsDict = {}
    for line in inFile:
        line = line.strip()
        entries = line.split(':')
        groupName = entries[0]
        groupProteins = entries[1][1:].split(' ')
        groupsDict[groupName] = groupProteins
    inFile.close()
    return groupsDict

def make_unaligned_fasta(dnaDirectory, groupsDict):
    """ Reads through files in provided directory to find gene sequences that
    match the proteins in the groups dictionary"""
    !mkdir proteinAlignments
    files = !ls {dnaDirectory}
    seqRecordDict = {}
    seqIDs = []
    for f in files:
        handle = open(dnaDirectory + f, 'r')
        for record in SeqIO.parse(handle, 'fasta'):
            seqRecordDict[record.id] = record
    for group in groupsDict:
        proteins = groupsDict[group]
        out = open('proteinAlignments/' + group + '.fasta', 'w')
        records = []
        for protein in proteins:
            seqID = protein.split('|')[0]
            if seqID not in seqIDs:
                seqIDs.append(seqID)
            protein = protein.split('|')[1]
            records.append(seqRecordDict[protein])
        SeqIO.write(records, out, 'fasta')
    return seqIDs


def align_gene_sequences(groupFastaDirectory):
    """ Use MAFFT to align gene sequences"""
    files = !ls {groupFastaDirectory}
    outfileList = []
    for infile in files:
        infile = groupFastaDirectory + infile
        outfile = os.path.splitext(infile)[0] + '_align.fasta'
        outfileList.append(outfile)
        !mafft --globalpair --maxiterate 1000 --thread 8 {infile} > {outfile}
    return outfileList

def trim_alignments(fileList):
    """ Use trimAl to trim gaps from input alignments"""
    outfileList = []
    for infile in fileList:
        outfile = os.path.splitext(infile)[0] + '_trim.fasta'
        outfileList.append(outfile)
        !/opt/PepPrograms/trimal/source/trimal -in {infile} -out {outfile} -automated1
    return outfileList

def concatenate_alignments(seqIDs, fileList):
    """ Using Biopython, concatenate alignments produced by MAFFT"""
    coreAlignment = AlignIO.read(fileList[0], 'fasta')
    for i in range(1, len(fileList)):
        align = AlignIO.read(fileList[i], 'fasta')
        coreAlignment = coreAlignment + align
    for i in range(len(seqIDs)):
        coreAlignment[i].id = seqIDs[i]
    AlignIO.write(coreAlignment, "core_alignment.fasta", 'fasta')

if len(sys.argv) != 3:
    usage()

inFileName = sys.argv[1]
dnaDirectory = sys.argv[2]

groupsDict = read_groups_file(inFileName)
seqIDs = make_unaligned_fasta(dnaDirectory, groupsDict)
alignList = align_gene_sequences('proteinAlignments/')
trimList = trim_alignments(alignList)
concatenate_alignments(seqIDs, trimList)
